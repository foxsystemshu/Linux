# OpenVPN Install and configuration YAML file for ANSIBLE
# Created by:  NÃ©meth Szabolcs (EGOJHI)

# INFO: 20 Tasks (Updated: 2022.04.28)
# The script firstly install all the prerequisites which are required to install, configure OpenVPN service, such as EPEL,OpenVPN,python-pip.
# After that, the script download EasyRSA archive and uncompress it to root folder with strict POSIX permissions.
# Then the script will copy prewritten VARS file from local to remote site -> On the remote site will execute EasyRSA init-pki script for build a PKI from VARS file
# This script will also build a CA to each remote site (Future plan: CA server build will be a different ansible script)
# CA build is finished, we create a server key and request, then sign it and generate strong Diffie-Hellman key and HMAC signature (DH may take a long time!!).
# After all the script will copy necessary files to OpenVPN config directory, and set config file parameters, then start/enable OpenVPN service.
# For the future use the script will create client-config folder structure also with strict permissions

--- 
- 
  become: true
  hosts: VPN
  name: "OpenVPN Install and configuration"
  gather_facts: true
  tasks:
    -
      name: EPEL install
      yum:
       name: epel-release
       state: latest
    - 
      name: Install OpenVPN package
      yum:
       name: openvpn
       state: latest
    -
      name: "Install python pip package"
      yum:
        name: python-pip
        state: latest
    - 
      ansible.builtin.get_url: 
        dest: "{{easyrsa_dest}}"
        group: root
        mode: "0600"
        owner: root
        url: "{{easyrsa}}"
      name: "Get EasyRSA files"
    - 
      ansible.builtin.unarchive: 
        dest: "{{easyrsa_dest}}"
        mode: "0600"
        owner: root
        group: root
        remote_src: true
        src: "{{item}}"
      name: "Uncompress EasyRSA archive"
      with_items: 
        - "{{ archive_file }}"
        
    - 
      copy: 
        dest: /root/EasyRSA-3.0.8/
        group: root
        mode: "0600"
        owner: root
        src: ~/Linux/ansible/vars
      name: "Copy vars to remote"
    -
      name: "Check if PKI dir exists"
      stat:
        path: "{{ working_dir }}pki"
      register: pki_dir

    - 
      name: "Run init-pki script"
      command: "sh {{ working_dir }}easyrsa init-pki"
      args:
        chdir: "{{ working_dir }}"
      when: not pki_dir.stat.exists
    - 
      name: "Install requied python packages"
      pip:
        name:
          - setuptools
          - pexpect
    -
      name: "Check if CA cert exists"
      stat:
        path: "{{ working_dir }}pki/private/ca.key"
      register: CA_cert     
    - 
      name: "Build CA"
      ansible.builtin.expect:
        command: "sh {{ working_dir }}easyrsa build-ca nopass"
        responses:
         'Common Name \(eg: your user, host, or server name\) \[Easy-RSA CA\]:': '{{ server_name }}'
        echo: true
      args:
          chdir: "{{ working_dir }}"
      register: build_ca
      when: not CA_cert.stat.exists
    -
      name: "Check if server key exists"
      stat:
        path: "{{ working_dir }}pki/private/{{server_name}}.key"
      register: server_cert 
    - 
       name: "Create a server key and request"
       ansible.builtin.expect:
         command: "sh {{ working_dir }}easyrsa  gen-req {{ server_name }} nopass"
         responses:
           'Common Name \(eg: your user, host, or server name\)': '{{ server_name }}'
         echo: true
       args:
         chdir: "{{ working_dir }}"
       when: not server_cert.stat.exists
    -
       name: "Sign server request"
       ansible.builtin.expect:
         command: "sh {{ working_dir }}easyrsa  sign-req server {{ server_name }}"
         responses:
           'Confirm request details:': 'yes'
         echo: true
       args:
        chdir: "{{ working_dir }}"
       when: not server_cert.stat.exists
    -
      name: "Check if Diffie-Hellman key exists"
      stat:
        path: "{{ working_dir }}dh2048.pem"
      register: dh_key 
    -
       name: "Generate strong Diffie-Hellman key and HMAC signature (may take a long time!!)"
       command: "{{ item }}" 
       with_items:
         - "openssl dhparam -out dh2048.pem 2048"
         - "openvpn --genkey --secret ta.key"
       args:
        chdir: "{{ working_dir }}"
       when: not dh_key.stat.exists

    -
       name: "Copy necessary files to OpenVPN config directory"
       copy: 
         src: "{{ item.src }}"
         dest: "{{ item.dest }}"
         remote_src: true
         owner: root
         group: openvpn
         mode: '0640'
       loop:
         - {src: '{{working_dir}}pki/ca.crt', dest: '/etc/openvpn/server'}
         - {src: '{{working_dir}}pki/issued/{{server_name}}.crt', dest: '/etc/openvpn/server'}
         - {src: '{{working_dir}}pki/private/{{server_name}}.key', dest: '/etc/openvpn/server'}
         - {src: '{{working_dir}}dh2048.pem', dest: '/etc/openvpn/server'}
         - {src: '{{working_dir}}ta.key', dest: '/etc/openvpn/server'}      
         - {src: /usr/share/doc/openvpn-2.4.12/sample/sample-config-files/server.conf, dest: '/etc/openvpn/server/{{server_name}}.conf'}

    - 
       name: "Set config file"
       lineinfile:
         path: /etc/openvpn/server/{{server_name}}.conf
         regexp: "{{item.regexp}}" # '^(.*)cert server.crt(.*)$'
         line: "{{item.line}}" #'cert {{server_name}}.crt'
       loop:
         - { regexp: '^(.*)cert server.crt(.*)$', line: 'cert {{server_name}}.crt'}
         - { regexp: '^(.*)key server.key(.*)$', line: 'key {{server_name}}.key'}
         - { regexp: '^(.*);user nobody(.*)$', line: 'user nobody'}
         - { regexp: '^(.*);group nobody(.*)$', line: 'group nobody'}
    -
       name: "Enable and start OpenVPN service with delay and retries option"
       systemd:
         name: openvpn-server@{{server_name}}
         state: started
         enabled: yes
       register: service
       until: service.status.ActiveState == "active" # NEED for do not lie about the service STATE on the first run
       retries: 5
       delay: 3
    - 
       name: "Create client-configs directory structure for the future use"
       file:
         path: /root/client-configs/{{item.dir}}
         state: directory
         owner: root
         group: root
         mode: '0700'
       loop:
        - {dir: "keys"}
        - {dir: "files"}
    -
       debug:
         msg:
          - "OpenVPN service status: {{service.status.ActiveState}}" 
          - "Run on {{server_name}}: systemctl status openvpn-server@{{server_name}})" 
        

  vars: 
    archive_file: /root/EasyRSA-3.0.8.tgz
    easyrsa: "https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.8/EasyRSA-3.0.8.tgz"
    easyrsa_dest: /root/
    server_name: ansible_hostname 
    working_dir: "/root/EasyRSA-3.0.8/"
